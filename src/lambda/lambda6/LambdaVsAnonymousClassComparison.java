package lambda.lambda6;

public class LambdaVsAnonymousClassComparison {
	public static void main(String[] args) {
		/**
		 * [람다(Lambda) vs 익명 클래스(Anonymous Class) - 심화 정리]
		 *
		 * ------------------------------------------------------------
		 * ■ 상태 관리
		 * ------------------------------------------------------------
		 * ▷ 익명 클래스
		 * - 인스턴스 내부에 상태(필드, 멤버 변수)를 가질 수 있다.
		 * - 내부 멤버 변수를 선언하고 값을 변경하거나 상태를 관리할 수 있다.
		 * - 즉, 상태를 필요로 하는 경우에는 익명 클래스가 유리하다.
		 *
		 * ▷ 람다
		 * - 함수는 상태(필드)를 가지지 않고, 오직 기능(메서드)만 제공한다.
		 * - 람다는 내부에 필드(멤버 변수)를 가질 수 없으므로 스스로 상태를 유지하지 않는다.
		 * - 따라서 람다는 상태가 필요 없는 순수한 연산이나 동작 정의에 적합하다.
		 *
		 * ------------------------------------------------------------
		 * ■ 익명 클래스와 람다의 용도 구분
		 * ------------------------------------------------------------
		 * ▷ 익명 클래스
		 * - 상태를 유지하거나, 여러 메서드를 가진 복잡한 인터페이스/클래스를 구현할 때 사용.
		 * - 기존 클래스나 인터페이스를 상속/구현해야 할 때 유리하다.
		 *
		 * ▷ 람다
		 * - 상태 유지가 필요 없고, 단일 메서드만 가진 함수형 인터페이스를 간결하게 구현할 때 사용.
		 * - 코드 가독성과 간결성이 중요할 때 적합하다.
		 * - 이론적으로 약간의 성능 이점이 있지만, 미미한 수준이다.
		 *
		 * ------------------------------------------------------------
		 * ■ 문법 및 가독성
		 * ------------------------------------------------------------
		 * ▷ 익명 클래스
		 * - 새로운 클래스를 정의하고 바로 인스턴스를 생성한다.
		 * - 문법이 길고 장황하지만, 여러 메서드를 동시에 오버라이드 가능하다.
		 *
		 * ▷ 람다
		 * - 단일 메서드를 가지는 함수형 인터페이스 구현에 사용.
		 * - 문법이 간결하고 직관적이며, 가독성이 높다.
		 *
		 * ------------------------------------------------------------
		 * ■ this 키워드 해석
		 * ------------------------------------------------------------
		 * ▷ 익명 클래스: this → 익명 클래스 자체의 인스턴스를 가리킴.
		 * ▷ 람다: this → 람다가 선언된 외부 클래스의 인스턴스를 가리킴.
		 *
		 * ------------------------------------------------------------
		 * ■ 상속 및 상태 관리
		 * ------------------------------------------------------------
		 * ▷ 익명 클래스
		 * - 클래스 상속 가능, 여러 메서드 구현 가능.
		 * - 내부에 상태(필드)를 가질 수 있음.
		 *
		 * ▷ 람다
		 * - 오직 함수형 인터페이스(단일 메서드)만 구현 가능.
		 * - 내부 상태 유지 불가 (함수로서만 동작).
		 *
		 * ------------------------------------------------------------
		 * ■ 호환성과 내부 동작
		 * ------------------------------------------------------------
		 * ▷ 익명 클래스
		 * - 자바 8 이전 버전에서도 사용 가능.
		 * - 컴파일 시 `OuterClass$1.class` 등 별도의 클래스 파일이 생성된다.
		 *
		 * ▷ 람다
		 * - 자바 8 이상에서 사용 가능.
		 * - 내부적으로 `invokeDynamic` 명령을 사용하여 런타임 시 동적으로 인스턴스를 생성한다.
		 *
		 * ------------------------------------------------------------
		 * ■ 캡처링 (Capturing) 규칙
		 * ------------------------------------------------------------
		 * - 익명 클래스와 람다 모두 외부 로컬 변수를 참조할 때,
		 *   `final` 또는 "사실상 final"인 지역 변수만 캡처할 수 있다.
		 * - 즉, 값이 변경되는 지역 변수는 참조할 수 없다.
		 *
		 * ------------------------------------------------------------
		 * ■ 언제 어떤 것을 사용할까?
		 * ------------------------------------------------------------
		 * ▷ 익명 클래스
		 * - 복잡한 인터페이스 구현이 필요하거나,
		 *   여러 메서드를 오버라이드해야 하거나,
		 *   내부 상태를 유지해야 할 때 적합하다.
		 *
		 * ▷ 람다
		 * - 간결함이 중요하고, 단일 메서드만 구현하는 경우.
		 * - 상태 유지가 필요 없는 간단한 동작을 정의할 때.
		 *
		 * ------------------------------------------------------------
		 * ■ 최종 정리
		 * ------------------------------------------------------------
		 * - 자바 8 이후 대부분의 익명 클래스는 람다로 대체 가능하다.
		 * - 단, 여러 메서드를 가진 인터페이스나 클래스 구현,
		 *   혹은 상태 유지가 필요한 경우에는 여전히 익명 클래스가 필요하다.
		 * - 선택 기준:
		 *     → 가독성 / 유지보수성 / 상태 관리 필요 여부 / 인터페이스 메서드 수
		 * - 가능한 경우라면 람다를 사용하는 것이 일반적으로 더 나은 선택이다.
		 */
	}
}
